
SD-Card_Koblenz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00000b12  00000ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000209  00800192  00800192  00000cd8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f11  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000707  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a8  00000000  00000000  000032df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00003b87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 39       	cpi	r26, 0x9B	; 155
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
  8a:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:

// ********************************************************************************
// Functions
// ********************************************************************************
void usart_init(void) {
 UBRRH = (unsigned char)(UBRR_VAL>>8);         //Set baud rate, set UBRRH first
  92:	10 bc       	out	0x20, r1	; 32
 UBRRL = (unsigned char)UBRR_VAL;
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
 UCSRB = (1<<RXEN) | (1<<TXEN);                //Enabling RX & TX
  98:	88 e1       	ldi	r24, 0x18	; 24
  9a:	8a b9       	out	0x0a, r24	; 10
 UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0); //Set frame format: 8data, 1stop bit, parity none
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
  a0:	08 95       	ret

000000a2 <usart_putchar>:
}

void usart_putchar(unsigned char data) {
  while (!(UCSRA & (1<<UDRE))) /*Wait for empty transmit buffer */
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_putchar>
     ;
  UDR = data;                  /*Put data into buffer, sends the data */
  a6:	8c b9       	out	0x0c, r24	; 12
  a8:	08 95       	ret

000000aa <usart_putchar_printf>:
}

//This function is called by printf as a stream handler
int usart_putchar_printf(char var, FILE *stream) {
   usart_putchar(var);
  aa:	0e 94 51 00 	call	0xa2	; 0xa2 <usart_putchar>
   return 0;
}
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	08 95       	ret

000000b4 <spi_init>:
 /********************************************************************
 * SPI initialization procedure
 ********************************************************************/
 void spi_init(void) {
	 // Set MOSI, SCK, SS output, MISO input, some preset values by HW-Reset are NOT set again to e.g. 0 or 1
	 DDRB = (1 << EN2) | (1 << EN1) | (1 << SS) | (1 << MOSI) | (1 << SCK);
  b4:	86 eb       	ldi	r24, 0xB6	; 182
  b6:	87 bb       	out	0x17, r24	; 23
	 // DDRB &= ~(1 << MISO); // not necessary, default = 0
	 // PORTB = (1 << EN2) | (1 << SS) | (1 << WP) | (1 << MOSI);

	 // Enable SPI, Master, set clock rate F_CPU/64
	 SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR1); //|(1<<SPR1);
  b8:	82 e5       	ldi	r24, 0x52	; 82
  ba:	8d b9       	out	0x0d, r24	; 13
	 printf("SPI Initialize completed\n");
  bc:	8c e8       	ldi	r24, 0x8C	; 140
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 8f 02 	call	0x51e	; 0x51e <puts>
  c4:	08 95       	ret

000000c6 <spi_tx>:

 /********************************************************************
 * transmit byte via SPI
 ********************************************************************/
 void spi_tx(unsigned char data) {
	 SPDR = data;
  c6:	8f b9       	out	0x0f, r24	; 15
	 while (!(SPSR & (1 << SPIF)))  //Wait for transmission to complete
  c8:	77 9b       	sbis	0x0e, 7	; 14
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <spi_tx+0x2>
	 ;
 }
  cc:	08 95       	ret

000000ce <spi_rx>:

 /********************************************************************
 * receive byte via SPI
 ********************************************************************/
 unsigned char spi_rx(void) {
	 while (!(SPSR & (1 << SPIF)))  //Wait for transmission to complete
  ce:	77 9b       	sbis	0x0e, 7	; 14
  d0:	fe cf       	rjmp	.-4      	; 0xce <spi_rx>
	 ;
	 return SPDR;
  d2:	8f b1       	in	r24, 0x0f	; 15
 }
  d4:	08 95       	ret

000000d6 <sd_cmd>:
 }

 /********************************************************************
 * send command to SD card
 ********************************************************************/
 unsigned char sd_cmd(unsigned char *CMD, char *cmd_nr) {
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	8c 01       	movw	r16, r24
  ea:	d6 2f       	mov	r29, r22
  ec:	d7 2e       	mov	r13, r23
	 unsigned char res;
	 unsigned int count;
	 spi_tx(CMD[0]);    //command index
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
	 spi_tx(CMD[1]);    //4 bytes argument
  f6:	f8 01       	movw	r30, r16
  f8:	81 81       	ldd	r24, Z+1	; 0x01
  fa:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
	 spi_tx(CMD[2]);
  fe:	f8 01       	movw	r30, r16
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
	 spi_tx(CMD[3]);
 106:	f8 01       	movw	r30, r16
 108:	83 81       	ldd	r24, Z+3	; 0x03
 10a:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
	 spi_tx(CMD[4]);
 10e:	f8 01       	movw	r30, r16
 110:	84 81       	ldd	r24, Z+4	; 0x04
 112:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
	 spi_tx(CMD[5]);    //CRC
 116:	f8 01       	movw	r30, r16
 118:	85 81       	ldd	r24, Z+5	; 0x05
 11a:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
 11e:	0f ef       	ldi	r16, 0xFF	; 255
 120:	1f ef       	ldi	r17, 0xFF	; 255
	 count=0;
	 do                 //receive response from card
	 {
		 spi_tx(0xff);    //Shift response from Slave to Master
		 res = spi_rx();
		 printf("SD command %s response: 0x%02x\n", cmd_nr, res);
 122:	0f 2e       	mov	r0, r31
 124:	f5 ea       	ldi	r31, 0xA5	; 165
 126:	ef 2e       	mov	r14, r31
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ff 2e       	mov	r15, r31
 12c:	f0 2d       	mov	r31, r0
	 spi_tx(CMD[5]);    //CRC
	 
	 count=0;
	 do                 //receive response from card
	 {
		 spi_tx(0xff);    //Shift response from Slave to Master
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
		 res = spi_rx();
 134:	0e 94 67 00 	call	0xce	; 0xce <spi_rx>
 138:	c8 2f       	mov	r28, r24
		 printf("SD command %s response: 0x%02x\n", cmd_nr, res);
 13a:	a8 2e       	mov	r10, r24
 13c:	b1 2c       	mov	r11, r1
 13e:	1f 92       	push	r1
 140:	8f 93       	push	r24
 142:	df 92       	push	r13
 144:	df 93       	push	r29
 146:	ff 92       	push	r15
 148:	ef 92       	push	r14
 14a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
		 count++;
	 }
	 while (((res & 0x80) != 0x00) && (count < 0xFFFF)); //as long as Bit 7 of R1 = 1 (and not 0) and TIMEOUT
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	cc 23       	and	r28, r28
 15c:	1c f4       	brge	.+6      	; 0x164 <sd_cmd+0x8e>
 15e:	01 50       	subi	r16, 0x01	; 1
 160:	11 09       	sbc	r17, r1
 162:	29 f7       	brne	.-54     	; 0x12e <sd_cmd+0x58>
	 //Slave pulls MISO up to high, when "nothing" is transmitted, so 0xff is always recieved.
	 printf("SD command %s response: 0x%02x\n", cmd_nr, res);
 164:	bf 92       	push	r11
 166:	af 92       	push	r10
 168:	df 92       	push	r13
 16a:	df 93       	push	r29
 16c:	85 ea       	ldi	r24, 0xA5	; 165
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	9f 93       	push	r25
 172:	8f 93       	push	r24
 174:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
	 return res;
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 }
 184:	8c 2f       	mov	r24, r28
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	df 90       	pop	r13
 194:	bf 90       	pop	r11
 196:	af 90       	pop	r10
 198:	08 95       	ret

0000019a <sd_init>:
 * SD Card initialization procedure
 ********************************************************************/
 unsigned int sd_init(void) {
	 unsigned char status = 0;

	 printf("SDINIT");
 19a:	85 ec       	ldi	r24, 0xC5	; 197
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	9f 93       	push	r25
 1a0:	8f 93       	push	r24
 1a2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	82 e5       	ldi	r24, 0x52	; 82
 1aa:	97 e0       	ldi	r25, 0x07	; 7
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <sd_init+0x12>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <sd_init+0x1c>
 1b6:	00 00       	nop

	 //power up  250ms 6.4 Power Scheme (part1_410.pdf)
	 _delay_ms(300);
	 
	 PORTB |= (1 << EN1);       //Power init sequence (see "C-Control Pro SD-Card Interface")
 1b8:	c1 9a       	sbi	0x18, 1	; 24
	 PORTB &= ~(1 << EN2);
 1ba:	c2 98       	cbi	0x18, 2	; 24
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	80 e7       	ldi	r24, 0x70	; 112
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <sd_init+0x28>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <sd_init+0x32>
 1cc:	00 00       	nop
	 _delay_ms(100);            //mind. 75ms Rest hier 100 ms
	 PORTB |= (1 << EN2);
 1ce:	c2 9a       	sbi	0x18, 2	; 24
	 PORTB &= ~(1 << EN1);
 1d0:	c1 98       	cbi	0x18, 1	; 24
	 
	 
	 //"supply at least 74 SD clocks to the SD card with keeping CMD line to high"
	 // line to high. In case of SPI mode, CS shall be held to high during 74 clock cycles.
	 //see Spec: 6.4 Power Scheme (part1_410.pdf)
	 PORTB |= (1 << SS);
 1d2:	c4 9a       	sbi	0x18, 4	; 24
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	80 e7       	ldi	r24, 0x70	; 112
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <sd_init+0x40>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <sd_init+0x4a>
 1e4:	00 00       	nop
	 _delay_ms(100);

	 PORTB &= ~(1 << SS);      
 1e6:	c4 98       	cbi	0x18, 4	; 24
	 //Koblenz irgendwas
	 for (i=0; i < 10; i++)
 1e8:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
 1ec:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
	 {
	 spi_tx(0xff);
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
	 PORTB |= (1 << SS);
	 _delay_ms(100);

	 PORTB &= ~(1 << SS);      
	 //Koblenz irgendwas
	 for (i=0; i < 10; i++)
 1fa:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 1fe:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 208:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
 20c:	0a 97       	sbiw	r24, 0x0a	; 10
 20e:	90 f3       	brcs	.-28     	; 0x1f4 <sd_init+0x5a>
	 {
	 spi_tx(0xff);
	 }
	 printf("SDINIT nach Koblenz Schleife");
 210:	8c ec       	ldi	r24, 0xCC	; 204
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	9f 93       	push	r25
 216:	8f 93       	push	r24
 218:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>

	 PORTB |= (1 << SS);
 21c:	c4 9a       	sbi	0x18, 4	; 24
 21e:	8f e4       	ldi	r24, 0x4F	; 79
 220:	93 ec       	ldi	r25, 0xC3	; 195
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <sd_init+0x88>
 226:	00 c0       	rjmp	.+0      	; 0x228 <sd_init+0x8e>
 228:	00 00       	nop
	 _delay_ms(25);

	 //switch to SPI Mode
	 //In case of SPI host, CMD0 shall be the first command to send the card to SPI mode.
	 PORTB &= ~(1 << SS);      
 22a:	c4 98       	cbi	0x18, 4	; 24
	 
	 printf("Send CMDO");
 22c:	89 ee       	ldi	r24, 0xE9	; 233
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9f 93       	push	r25
 232:	8f 93       	push	r24
 234:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0

	 //PORTB inital value = 0
	 do 
	 {
	 status = sd_cmd(CMD0, "CMD0");    //CMD0 (response must be 0x01)		
 240:	63 ef       	ldi	r22, 0xF3	; 243
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	88 e7       	ldi	r24, 0x78	; 120
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 6b 00 	call	0xd6	; 0xd6 <sd_cmd>
	  
	 } while (status != 0x01);
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	c1 f7       	brne	.-16     	; 0x240 <sd_init+0xa6>
	 
	 do
	 {
		 sd_cmd(CMD55, "CMD55");
 250:	68 ef       	ldi	r22, 0xF8	; 248
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	82 e7       	ldi	r24, 0x72	; 114
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 6b 00 	call	0xd6	; 0xd6 <sd_cmd>
		 status = sd_cmd(ACMD41, "ACMD41"); //ACMD41 (response must be 0x00)
 25c:	6e ef       	ldi	r22, 0xFE	; 254
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	8c e6       	ldi	r24, 0x6C	; 108
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 6b 00 	call	0xd6	; 0xd6 <sd_cmd>
	 }
	 while (status != 0x00);
 268:	81 11       	cpse	r24, r1
 26a:	f2 cf       	rjmp	.-28     	; 0x250 <sd_init+0xb6>

	 printf("SD Initialisation completed, status: 0x%02x\n", status);
 26c:	1f 92       	push	r1
 26e:	1f 92       	push	r1
 270:	85 e0       	ldi	r24, 0x05	; 5
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	9f 93       	push	r25
 276:	8f 93       	push	r24
 278:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
	 return status;
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 }
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	08 95       	ret

0000028a <write_block>:
 }

 /********************************************************************
 * Write block subroutine
 ********************************************************************/
 unsigned char write_block(unsigned char* buff) {
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	8c 01       	movw	r16, r24
	 unsigned char ret_val = 0;
	 unsigned int count;
	 
	 status = sd_cmd(CMD24, "CMD24");   //CMD24 (WRITE_BLOCK)
 294:	62 e3       	ldi	r22, 0x32	; 50
 296:	71 e0       	ldi	r23, 0x01	; 1
 298:	80 e6       	ldi	r24, 0x60	; 96
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 6b 00 	call	0xd6	; 0xd6 <sd_cmd>
 2a0:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <status>
	 
	 if (status == 0x00)     //Response must be 0x00
 2a4:	81 11       	cpse	r24, r1
 2a6:	50 c0       	rjmp	.+160    	; 0x348 <write_block+0xbe>
	 {
		 spi_tx(0xFE);    //0xFE is StartBlock Token, see Spec. pages 172, 157
 2a8:	8e ef       	ldi	r24, 0xFE	; 254
 2aa:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
 2ae:	e8 01       	movw	r28, r16
 2b0:	1e 5f       	subi	r17, 0xFE	; 254
		 for (count=0; count<512; count++)    //data to be send
		 spi_tx(buff[count]);
 2b2:	89 91       	ld	r24, Y+
 2b4:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
	 status = sd_cmd(CMD24, "CMD24");   //CMD24 (WRITE_BLOCK)
	 
	 if (status == 0x00)     //Response must be 0x00
	 {
		 spi_tx(0xFE);    //0xFE is StartBlock Token, see Spec. pages 172, 157
		 for (count=0; count<512; count++)    //data to be send
 2b8:	c0 17       	cp	r28, r16
 2ba:	d1 07       	cpc	r29, r17
 2bc:	d1 f7       	brne	.-12     	; 0x2b2 <write_block+0x28>
		 spi_tx(buff[count]);

		 //For block oriented write data transfer, the CRC check bits are added to each data block.
		 spi_tx(0xFF);       //sending CRC16 (not used)
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
		 spi_tx(0xFF);      //sending 2 x 8 Bit CRC
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
		 
		 spi_tx(0xFF);
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
		 status = spi_rx();
 2d0:	0e 94 67 00 	call	0xce	; 0xce <spi_rx>
 2d4:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <status>
		 printf("write_block() = 0x%02x\n", status);
 2d8:	1f 92       	push	r1
 2da:	8f 93       	push	r24
 2dc:	88 e3       	ldi	r24, 0x38	; 56
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	9f 93       	push	r25
 2e2:	8f 93       	push	r24
 2e4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>

		 if ((status & 0x15) == 0x05) //Data Response Token: Bit 4 = 0 & '010' = data accepted & end bit always '1'
 2e8:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <status>
 2ec:	85 71       	andi	r24, 0x15	; 21
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	85 30       	cpi	r24, 0x05	; 5
 2f8:	49 f5       	brne	.+82     	; 0x34c <write_block+0xc2>
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
			 count=0;
			 do        //waiting for finish of the busy state
			 {
				 spi_tx(0xFF);
				 status = spi_rx();
				 printf("write_block() = 0x%02x, %d\n", status, count);
 2fe:	00 e5       	ldi	r16, 0x50	; 80
 300:	11 e0       	ldi	r17, 0x01	; 1
		 if ((status & 0x15) == 0x05) //Data Response Token: Bit 4 = 0 & '010' = data accepted & end bit always '1'
		 {
			 count=0;
			 do        //waiting for finish of the busy state
			 {
				 spi_tx(0xFF);
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
				 status = spi_rx();
 308:	0e 94 67 00 	call	0xce	; 0xce <spi_rx>
 30c:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <status>
				 printf("write_block() = 0x%02x, %d\n", status, count);
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	1f 92       	push	r1
 316:	8f 93       	push	r24
 318:	1f 93       	push	r17
 31a:	0f 93       	push	r16
 31c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
				 count++;
 320:	21 96       	adiw	r28, 0x01	; 1
			 }
			 while ((status != 0xFF) && (count < 0xffff));
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <status>
 332:	8f 3f       	cpi	r24, 0xFF	; 255
 334:	21 f0       	breq	.+8      	; 0x33e <write_block+0xb4>
 336:	cf 3f       	cpi	r28, 0xFF	; 255
 338:	8f ef       	ldi	r24, 0xFF	; 255
 33a:	d8 07       	cpc	r29, r24
 33c:	11 f7       	brne	.-60     	; 0x302 <write_block+0x78>

 /********************************************************************
 * Write block subroutine
 ********************************************************************/
 unsigned char write_block(unsigned char* buff) {
	 unsigned char ret_val = 0;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	29 f4       	brne	.+10     	; 0x34e <write_block+0xc4>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	03 c0       	rjmp	.+6      	; 0x34e <write_block+0xc4>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	01 c0       	rjmp	.+2      	; 0x34e <write_block+0xc4>
 34c:	80 e0       	ldi	r24, 0x00	; 0
			 if (count < 0xffff)
			 ret_val = 1;  //true = OK
		 }
	 }
	 return ret_val;
 }
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	0f 91       	pop	r16
 356:	08 95       	ret

00000358 <read_block>:

 /********************************************************************
 * Read block subroutine
 ********************************************************************/
 unsigned char read_block(unsigned char* buff) {
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	8c 01       	movw	r16, r24
	 unsigned int count;
	 unsigned char ret_val = 0; //result of operation
	 
	 status = sd_cmd(CMD17, "CMD17");   //CMD17 (READ_SINGLE_BLOCK)
 366:	6c e6       	ldi	r22, 0x6C	; 108
 368:	71 e0       	ldi	r23, 0x01	; 1
 36a:	86 e6       	ldi	r24, 0x66	; 102
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 6b 00 	call	0xd6	; 0xd6 <sd_cmd>
 372:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <status>
	 if (status == 0x00)       //response must be 0x00
 376:	81 11       	cpse	r24, r1
 378:	41 c0       	rjmp	.+130    	; 0x3fc <read_block+0xa4>
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	d0 e0       	ldi	r29, 0x00	; 0
		 do                   //waiting for beginnig of the data block
		 {                    //First byte: Start Block Token = 0xFE
			 spi_tx(0xFF);
			 status = spi_rx();
			 PORTA = ~status;
			 printf("read_block() = 0x%02x, %d\n", status, count);
 37e:	0f 2e       	mov	r0, r31
 380:	f2 e7       	ldi	r31, 0x72	; 114
 382:	ef 2e       	mov	r14, r31
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	ff 2e       	mov	r15, r31
 388:	f0 2d       	mov	r31, r0
	 {
		 count=0;

		 do                   //waiting for beginnig of the data block
		 {                    //First byte: Start Block Token = 0xFE
			 spi_tx(0xFF);
 38a:	8f ef       	ldi	r24, 0xFF	; 255
 38c:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
			 status = spi_rx();
 390:	0e 94 67 00 	call	0xce	; 0xce <spi_rx>
 394:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <status>
			 PORTA = ~status;
 398:	80 95       	com	r24
 39a:	8b bb       	out	0x1b, r24	; 27
			 printf("read_block() = 0x%02x, %d\n", status, count);
 39c:	df 93       	push	r29
 39e:	cf 93       	push	r28
 3a0:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <status>
 3a4:	1f 92       	push	r1
 3a6:	8f 93       	push	r24
 3a8:	ff 92       	push	r15
 3aa:	ef 92       	push	r14
 3ac:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
			 count++;
 3b0:	21 96       	adiw	r28, 0x01	; 1
		 }
		 while ((status != 0xFE) && (count < 0xFFFF)); //try 0xFFFF times maximum
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <status>
 3c2:	8e 3f       	cpi	r24, 0xFE	; 254
 3c4:	f9 f0       	breq	.+62     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3c6:	cf 3f       	cpi	r28, 0xFF	; 255
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	d8 07       	cpc	r29, r24
 3cc:	f1 f6       	brne	.-68     	; 0x38a <read_block+0x32>
 /********************************************************************
 * Read block subroutine
 ********************************************************************/
 unsigned char read_block(unsigned char* buff) {
	 unsigned int count;
	 unsigned char ret_val = 0; //result of operation
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	1e c0       	rjmp	.+60     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		 while ((status != 0xFE) && (count < 0xFFFF)); //try 0xFFFF times maximum

		 if (count < 0xFFFF)
		 {
			 for (count=0; count<512; count++){    //reading block of 512 bytes
				 spi_tx(0xFF);               //shift data from slave to master data register
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
				 buff[count] = spi_rx();
 3d8:	0e 94 67 00 	call	0xce	; 0xce <spi_rx>
 3dc:	89 93       	st	Y+, r24
		 }
		 while ((status != 0xFE) && (count < 0xFFFF)); //try 0xFFFF times maximum

		 if (count < 0xFFFF)
		 {
			 for (count=0; count<512; count++){    //reading block of 512 bytes
 3de:	c0 17       	cp	r28, r16
 3e0:	d1 07       	cpc	r29, r17
 3e2:	b9 f7       	brne	.-18     	; 0x3d2 <read_block+0x7a>
				 spi_tx(0xFF);               //shift data from slave to master data register
				 buff[count] = spi_rx();
			 }
			 
			 spi_tx(0xFF); //A CRC is appended to the end of each block ensuring data transfer integrity
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
			 spi_rx();      //reading 16-bit CRC, but ignored
 3ea:	0e 94 67 00 	call	0xce	; 0xce <spi_rx>
			 spi_tx(0xFF);
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	0e 94 63 00 	call	0xc6	; 0xc6 <spi_tx>
			 spi_rx();     //reading 16-bit CRC, but ignored
 3f4:	0e 94 67 00 	call	0xce	; 0xce <spi_rx>
			 ret_val = 1;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	09 c0       	rjmp	.+18     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 /********************************************************************
 * Read block subroutine
 ********************************************************************/
 unsigned char read_block(unsigned char* buff) {
	 unsigned int count;
	 unsigned char ret_val = 0; //result of operation
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	80 e0       	ldi	r24, 0x00	; 0
			 spi_tx(0xFF);
			 spi_rx();     //reading 16-bit CRC, but ignored
			 ret_val = 1;
		 }
	 }
	 return ret_val;
 402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
			 printf("read_block() = 0x%02x, %d\n", status, count);
			 count++;
		 }
		 while ((status != 0xFE) && (count < 0xFFFF)); //try 0xFFFF times maximum

		 if (count < 0xFFFF)
 404:	21 96       	adiw	r28, 0x01	; 1
 406:	e1 f3       	breq	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	e8 01       	movw	r28, r16
 40a:	1e 5f       	subi	r17, 0xFE	; 254
 40c:	e2 cf       	rjmp	.-60     	; 0x3d2 <read_block+0x7a>
			 spi_rx();     //reading 16-bit CRC, but ignored
			 ret_val = 1;
		 }
	 }
	 return ret_val;
 }
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	08 95       	ret

0000041c <main>:
 unsigned char  read_block(unsigned char *);

 /********************************************************************
 * Main
 ********************************************************************/
 int main(void) {
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
	 
	 DDRA = 0xFF; //LEDs on Port A (output)
 424:	8f ef       	ldi	r24, 0xFF	; 255
 426:	8a bb       	out	0x1a, r24	; 26
	 
	 stdout = &mystdout; //setup stdio stream
 428:	8e e7       	ldi	r24, 0x7E	; 126
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <__iob+0x3>
 430:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <__iob+0x2>
	 usart_init(); //UART to terminal on PC
 434:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
		 //PORTA |= ERROR2;          //LEDs show write protection after Restart/Reset
		 printf("Card write protected");
		 return 0;
	 }
	 */
	 spi_init();
 438:	0e 94 5a 00 	call	0xb4	; 0xb4 <spi_init>
	 	 
	 if (sd_init() != 0) {       //if initialization is NOT OK
 43c:	0e 94 cd 00 	call	0x19a	; 0x19a <sd_init>
 440:	ec 01       	movw	r28, r24
 442:	89 2b       	or	r24, r25
 444:	09 f0       	breq	.+2      	; 0x448 <main+0x2c>
 446:	4e c0       	rjmp	.+156    	; 0x4e4 <main+0xc8>
 448:	e5 e9       	ldi	r30, 0x95	; 149
 44a:	f3 e0       	ldi	r31, 0x03	; 3
 44c:	25 e9       	ldi	r18, 0x95	; 149
 44e:	31 e0       	ldi	r19, 0x01	; 1
 450:	80 e0       	ldi	r24, 0x00	; 0
		 return 0;
	 }

	 for (i = 512; i > 0; i--)     //filling buffer for writing (modulo 8 bit)
	 buffer[i] = i;
 452:	82 93       	st	-Z, r24
 454:	81 50       	subi	r24, 0x01	; 1
	 	 
	 if (sd_init() != 0) {       //if initialization is NOT OK
		 return 0;
	 }

	 for (i = 512; i > 0; i--)     //filling buffer for writing (modulo 8 bit)
 456:	e2 17       	cp	r30, r18
 458:	f3 07       	cpc	r31, r19
 45a:	d9 f7       	brne	.-10     	; 0x452 <main+0x36>
 45c:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
 460:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
	 buffer[i] = i;

	 PORTA = write_block(buffer);   //writing data to SD card;
 464:	84 e9       	ldi	r24, 0x94	; 148
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 45 01 	call	0x28a	; 0x28a <write_block>
 46c:	8b bb       	out	0x1b, r24	; 27
 46e:	e4 e9       	ldi	r30, 0x94	; 148
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	84 e9       	ldi	r24, 0x94	; 148
 474:	93 e0       	ldi	r25, 0x03	; 3
	 
	 for (i = 0; i < 512; i++)      //cleaning buffer
	 buffer[i] = 0;
 476:	11 92       	st	Z+, r1
	 for (i = 512; i > 0; i--)     //filling buffer for writing (modulo 8 bit)
	 buffer[i] = i;

	 PORTA = write_block(buffer);   //writing data to SD card;
	 
	 for (i = 0; i < 512; i++)      //cleaning buffer
 478:	e8 17       	cp	r30, r24
 47a:	f9 07       	cpc	r31, r25
 47c:	e1 f7       	brne	.-8      	; 0x476 <main+0x5a>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
 486:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
	 buffer[i] = 0;
	 
	 if (read_block(buffer))        //reading data from SD card
 48a:	84 e9       	ldi	r24, 0x94	; 148
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 ac 01 	call	0x358	; 0x358 <read_block>
 492:	88 23       	and	r24, r24
 494:	31 f1       	breq	.+76     	; 0x4e2 <main+0xc6>
	 {
		 for (i = 0; i < 512; i++)
 496:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <__data_end+0x1>
 49a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <__data_end>
		 {
			 //PORTA = ~buffer[i];          //Show data using LEDs
			 printf("%3d", buffer[i]);
 49e:	0d e8       	ldi	r16, 0x8D	; 141
 4a0:	11 e0       	ldi	r17, 0x01	; 1
 4a2:	cc 56       	subi	r28, 0x6C	; 108
 4a4:	de 4f       	sbci	r29, 0xFE	; 254
 4a6:	88 81       	ld	r24, Y
 4a8:	1f 92       	push	r1
 4aa:	8f 93       	push	r24
 4ac:	1f 93       	push	r17
 4ae:	0f 93       	push	r16
 4b0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <printf>
 4b4:	8f e3       	ldi	r24, 0x3F	; 63
 4b6:	9c e9       	ldi	r25, 0x9C	; 156
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <main+0x9c>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <main+0xa2>
 4be:	00 00       	nop
	 for (i = 0; i < 512; i++)      //cleaning buffer
	 buffer[i] = 0;
	 
	 if (read_block(buffer))        //reading data from SD card
	 {
		 for (i = 0; i < 512; i++)
 4c0:	c0 91 92 01 	lds	r28, 0x0192	; 0x800192 <__data_end>
 4c4:	d0 91 93 01 	lds	r29, 0x0193	; 0x800193 <__data_end+0x1>
 4c8:	21 96       	adiw	r28, 0x01	; 1
 4ca:	d0 93 93 01 	sts	0x0193, r29	; 0x800193 <__data_end+0x1>
 4ce:	c0 93 92 01 	sts	0x0192, r28	; 0x800192 <__data_end>
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	c1 15       	cp	r28, r1
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	d9 07       	cpc	r29, r25
 4e0:	00 f3       	brcs	.-64     	; 0x4a2 <main+0x86>
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <main+0xc6>
			 printf("%3d", buffer[i]);
			 _delay_ms(20);         //to see LEDs blinking
		 }
	 }
	 while (1);
 }
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <printf>:
 4f2:	a0 e0       	ldi	r26, 0x00	; 0
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	ef e7       	ldi	r30, 0x7F	; 127
 4f8:	f2 e0       	ldi	r31, 0x02	; 2
 4fa:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__prologue_saves__+0x20>
 4fe:	ae 01       	movw	r20, r28
 500:	4b 5f       	subi	r20, 0xFB	; 251
 502:	5f 4f       	sbci	r21, 0xFF	; 255
 504:	fa 01       	movw	r30, r20
 506:	61 91       	ld	r22, Z+
 508:	71 91       	ld	r23, Z+
 50a:	af 01       	movw	r20, r30
 50c:	80 91 97 03 	lds	r24, 0x0397	; 0x800397 <__iob+0x2>
 510:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <__iob+0x3>
 514:	0e 94 bf 02 	call	0x57e	; 0x57e <vfprintf>
 518:	e2 e0       	ldi	r30, 0x02	; 2
 51a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__epilogue_restores__+0x20>

0000051e <puts>:
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <__iob+0x2>
 52a:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <__iob+0x3>
 52e:	23 81       	ldd	r18, Z+3	; 0x03
 530:	21 ff       	sbrs	r18, 1
 532:	1b c0       	rjmp	.+54     	; 0x56a <puts+0x4c>
 534:	8c 01       	movw	r16, r24
 536:	d0 e0       	ldi	r29, 0x00	; 0
 538:	c0 e0       	ldi	r28, 0x00	; 0
 53a:	f8 01       	movw	r30, r16
 53c:	81 91       	ld	r24, Z+
 53e:	8f 01       	movw	r16, r30
 540:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <__iob+0x2>
 544:	70 91 98 03 	lds	r23, 0x0398	; 0x800398 <__iob+0x3>
 548:	db 01       	movw	r26, r22
 54a:	18 96       	adiw	r26, 0x08	; 8
 54c:	ed 91       	ld	r30, X+
 54e:	fc 91       	ld	r31, X
 550:	19 97       	sbiw	r26, 0x09	; 9
 552:	88 23       	and	r24, r24
 554:	31 f0       	breq	.+12     	; 0x562 <puts+0x44>
 556:	09 95       	icall
 558:	89 2b       	or	r24, r25
 55a:	79 f3       	breq	.-34     	; 0x53a <puts+0x1c>
 55c:	df ef       	ldi	r29, 0xFF	; 255
 55e:	cf ef       	ldi	r28, 0xFF	; 255
 560:	ec cf       	rjmp	.-40     	; 0x53a <puts+0x1c>
 562:	8a e0       	ldi	r24, 0x0A	; 10
 564:	09 95       	icall
 566:	89 2b       	or	r24, r25
 568:	19 f0       	breq	.+6      	; 0x570 <puts+0x52>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	9f ef       	ldi	r25, 0xFF	; 255
 56e:	02 c0       	rjmp	.+4      	; 0x574 <puts+0x56>
 570:	8d 2f       	mov	r24, r29
 572:	9c 2f       	mov	r25, r28
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	08 95       	ret

0000057e <vfprintf>:
 57e:	ab e0       	ldi	r26, 0x0B	; 11
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e5 ec       	ldi	r30, 0xC5	; 197
 584:	f2 e0       	ldi	r31, 0x02	; 2
 586:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__prologue_saves__>
 58a:	6c 01       	movw	r12, r24
 58c:	7b 01       	movw	r14, r22
 58e:	8a 01       	movw	r16, r20
 590:	fc 01       	movw	r30, r24
 592:	17 82       	std	Z+7, r1	; 0x07
 594:	16 82       	std	Z+6, r1	; 0x06
 596:	83 81       	ldd	r24, Z+3	; 0x03
 598:	81 ff       	sbrs	r24, 1
 59a:	cc c1       	rjmp	.+920    	; 0x934 <__stack+0xd5>
 59c:	ce 01       	movw	r24, r28
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	3c 01       	movw	r6, r24
 5a2:	f6 01       	movw	r30, r12
 5a4:	93 81       	ldd	r25, Z+3	; 0x03
 5a6:	f7 01       	movw	r30, r14
 5a8:	93 fd       	sbrc	r25, 3
 5aa:	85 91       	lpm	r24, Z+
 5ac:	93 ff       	sbrs	r25, 3
 5ae:	81 91       	ld	r24, Z+
 5b0:	7f 01       	movw	r14, r30
 5b2:	88 23       	and	r24, r24
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <vfprintf+0x3a>
 5b6:	ba c1       	rjmp	.+884    	; 0x92c <__stack+0xcd>
 5b8:	85 32       	cpi	r24, 0x25	; 37
 5ba:	39 f4       	brne	.+14     	; 0x5ca <vfprintf+0x4c>
 5bc:	93 fd       	sbrc	r25, 3
 5be:	85 91       	lpm	r24, Z+
 5c0:	93 ff       	sbrs	r25, 3
 5c2:	81 91       	ld	r24, Z+
 5c4:	7f 01       	movw	r14, r30
 5c6:	85 32       	cpi	r24, 0x25	; 37
 5c8:	29 f4       	brne	.+10     	; 0x5d4 <vfprintf+0x56>
 5ca:	b6 01       	movw	r22, r12
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 5d2:	e7 cf       	rjmp	.-50     	; 0x5a2 <vfprintf+0x24>
 5d4:	91 2c       	mov	r9, r1
 5d6:	21 2c       	mov	r2, r1
 5d8:	31 2c       	mov	r3, r1
 5da:	ff e1       	ldi	r31, 0x1F	; 31
 5dc:	f3 15       	cp	r31, r3
 5de:	d8 f0       	brcs	.+54     	; 0x616 <vfprintf+0x98>
 5e0:	8b 32       	cpi	r24, 0x2B	; 43
 5e2:	79 f0       	breq	.+30     	; 0x602 <vfprintf+0x84>
 5e4:	38 f4       	brcc	.+14     	; 0x5f4 <vfprintf+0x76>
 5e6:	80 32       	cpi	r24, 0x20	; 32
 5e8:	79 f0       	breq	.+30     	; 0x608 <vfprintf+0x8a>
 5ea:	83 32       	cpi	r24, 0x23	; 35
 5ec:	a1 f4       	brne	.+40     	; 0x616 <vfprintf+0x98>
 5ee:	23 2d       	mov	r18, r3
 5f0:	20 61       	ori	r18, 0x10	; 16
 5f2:	1d c0       	rjmp	.+58     	; 0x62e <vfprintf+0xb0>
 5f4:	8d 32       	cpi	r24, 0x2D	; 45
 5f6:	61 f0       	breq	.+24     	; 0x610 <vfprintf+0x92>
 5f8:	80 33       	cpi	r24, 0x30	; 48
 5fa:	69 f4       	brne	.+26     	; 0x616 <vfprintf+0x98>
 5fc:	23 2d       	mov	r18, r3
 5fe:	21 60       	ori	r18, 0x01	; 1
 600:	16 c0       	rjmp	.+44     	; 0x62e <vfprintf+0xb0>
 602:	83 2d       	mov	r24, r3
 604:	82 60       	ori	r24, 0x02	; 2
 606:	38 2e       	mov	r3, r24
 608:	e3 2d       	mov	r30, r3
 60a:	e4 60       	ori	r30, 0x04	; 4
 60c:	3e 2e       	mov	r3, r30
 60e:	2a c0       	rjmp	.+84     	; 0x664 <vfprintf+0xe6>
 610:	f3 2d       	mov	r31, r3
 612:	f8 60       	ori	r31, 0x08	; 8
 614:	1d c0       	rjmp	.+58     	; 0x650 <vfprintf+0xd2>
 616:	37 fc       	sbrc	r3, 7
 618:	2d c0       	rjmp	.+90     	; 0x674 <vfprintf+0xf6>
 61a:	20 ed       	ldi	r18, 0xD0	; 208
 61c:	28 0f       	add	r18, r24
 61e:	2a 30       	cpi	r18, 0x0A	; 10
 620:	40 f0       	brcs	.+16     	; 0x632 <vfprintf+0xb4>
 622:	8e 32       	cpi	r24, 0x2E	; 46
 624:	b9 f4       	brne	.+46     	; 0x654 <vfprintf+0xd6>
 626:	36 fc       	sbrc	r3, 6
 628:	81 c1       	rjmp	.+770    	; 0x92c <__stack+0xcd>
 62a:	23 2d       	mov	r18, r3
 62c:	20 64       	ori	r18, 0x40	; 64
 62e:	32 2e       	mov	r3, r18
 630:	19 c0       	rjmp	.+50     	; 0x664 <vfprintf+0xe6>
 632:	36 fe       	sbrs	r3, 6
 634:	06 c0       	rjmp	.+12     	; 0x642 <vfprintf+0xc4>
 636:	8a e0       	ldi	r24, 0x0A	; 10
 638:	98 9e       	mul	r9, r24
 63a:	20 0d       	add	r18, r0
 63c:	11 24       	eor	r1, r1
 63e:	92 2e       	mov	r9, r18
 640:	11 c0       	rjmp	.+34     	; 0x664 <vfprintf+0xe6>
 642:	ea e0       	ldi	r30, 0x0A	; 10
 644:	2e 9e       	mul	r2, r30
 646:	20 0d       	add	r18, r0
 648:	11 24       	eor	r1, r1
 64a:	22 2e       	mov	r2, r18
 64c:	f3 2d       	mov	r31, r3
 64e:	f0 62       	ori	r31, 0x20	; 32
 650:	3f 2e       	mov	r3, r31
 652:	08 c0       	rjmp	.+16     	; 0x664 <vfprintf+0xe6>
 654:	8c 36       	cpi	r24, 0x6C	; 108
 656:	21 f4       	brne	.+8      	; 0x660 <vfprintf+0xe2>
 658:	83 2d       	mov	r24, r3
 65a:	80 68       	ori	r24, 0x80	; 128
 65c:	38 2e       	mov	r3, r24
 65e:	02 c0       	rjmp	.+4      	; 0x664 <vfprintf+0xe6>
 660:	88 36       	cpi	r24, 0x68	; 104
 662:	41 f4       	brne	.+16     	; 0x674 <vfprintf+0xf6>
 664:	f7 01       	movw	r30, r14
 666:	93 fd       	sbrc	r25, 3
 668:	85 91       	lpm	r24, Z+
 66a:	93 ff       	sbrs	r25, 3
 66c:	81 91       	ld	r24, Z+
 66e:	7f 01       	movw	r14, r30
 670:	81 11       	cpse	r24, r1
 672:	b3 cf       	rjmp	.-154    	; 0x5da <vfprintf+0x5c>
 674:	98 2f       	mov	r25, r24
 676:	9f 7d       	andi	r25, 0xDF	; 223
 678:	95 54       	subi	r25, 0x45	; 69
 67a:	93 30       	cpi	r25, 0x03	; 3
 67c:	28 f4       	brcc	.+10     	; 0x688 <vfprintf+0x10a>
 67e:	0c 5f       	subi	r16, 0xFC	; 252
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	9f e3       	ldi	r25, 0x3F	; 63
 684:	99 83       	std	Y+1, r25	; 0x01
 686:	0d c0       	rjmp	.+26     	; 0x6a2 <vfprintf+0x124>
 688:	83 36       	cpi	r24, 0x63	; 99
 68a:	31 f0       	breq	.+12     	; 0x698 <vfprintf+0x11a>
 68c:	83 37       	cpi	r24, 0x73	; 115
 68e:	71 f0       	breq	.+28     	; 0x6ac <vfprintf+0x12e>
 690:	83 35       	cpi	r24, 0x53	; 83
 692:	09 f0       	breq	.+2      	; 0x696 <vfprintf+0x118>
 694:	59 c0       	rjmp	.+178    	; 0x748 <vfprintf+0x1ca>
 696:	21 c0       	rjmp	.+66     	; 0x6da <vfprintf+0x15c>
 698:	f8 01       	movw	r30, r16
 69a:	80 81       	ld	r24, Z
 69c:	89 83       	std	Y+1, r24	; 0x01
 69e:	0e 5f       	subi	r16, 0xFE	; 254
 6a0:	1f 4f       	sbci	r17, 0xFF	; 255
 6a2:	88 24       	eor	r8, r8
 6a4:	83 94       	inc	r8
 6a6:	91 2c       	mov	r9, r1
 6a8:	53 01       	movw	r10, r6
 6aa:	13 c0       	rjmp	.+38     	; 0x6d2 <vfprintf+0x154>
 6ac:	28 01       	movw	r4, r16
 6ae:	f2 e0       	ldi	r31, 0x02	; 2
 6b0:	4f 0e       	add	r4, r31
 6b2:	51 1c       	adc	r5, r1
 6b4:	f8 01       	movw	r30, r16
 6b6:	a0 80       	ld	r10, Z
 6b8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ba:	36 fe       	sbrs	r3, 6
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <vfprintf+0x146>
 6be:	69 2d       	mov	r22, r9
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <vfprintf+0x14a>
 6c4:	6f ef       	ldi	r22, 0xFF	; 255
 6c6:	7f ef       	ldi	r23, 0xFF	; 255
 6c8:	c5 01       	movw	r24, r10
 6ca:	0e 94 ab 04 	call	0x956	; 0x956 <strnlen>
 6ce:	4c 01       	movw	r8, r24
 6d0:	82 01       	movw	r16, r4
 6d2:	f3 2d       	mov	r31, r3
 6d4:	ff 77       	andi	r31, 0x7F	; 127
 6d6:	3f 2e       	mov	r3, r31
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <vfprintf+0x188>
 6da:	28 01       	movw	r4, r16
 6dc:	22 e0       	ldi	r18, 0x02	; 2
 6de:	42 0e       	add	r4, r18
 6e0:	51 1c       	adc	r5, r1
 6e2:	f8 01       	movw	r30, r16
 6e4:	a0 80       	ld	r10, Z
 6e6:	b1 80       	ldd	r11, Z+1	; 0x01
 6e8:	36 fe       	sbrs	r3, 6
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <vfprintf+0x174>
 6ec:	69 2d       	mov	r22, r9
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0x178>
 6f2:	6f ef       	ldi	r22, 0xFF	; 255
 6f4:	7f ef       	ldi	r23, 0xFF	; 255
 6f6:	c5 01       	movw	r24, r10
 6f8:	0e 94 a0 04 	call	0x940	; 0x940 <strnlen_P>
 6fc:	4c 01       	movw	r8, r24
 6fe:	f3 2d       	mov	r31, r3
 700:	f0 68       	ori	r31, 0x80	; 128
 702:	3f 2e       	mov	r3, r31
 704:	82 01       	movw	r16, r4
 706:	33 fc       	sbrc	r3, 3
 708:	1b c0       	rjmp	.+54     	; 0x740 <vfprintf+0x1c2>
 70a:	82 2d       	mov	r24, r2
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	88 16       	cp	r8, r24
 710:	99 06       	cpc	r9, r25
 712:	b0 f4       	brcc	.+44     	; 0x740 <vfprintf+0x1c2>
 714:	b6 01       	movw	r22, r12
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 71e:	2a 94       	dec	r2
 720:	f4 cf       	rjmp	.-24     	; 0x70a <vfprintf+0x18c>
 722:	f5 01       	movw	r30, r10
 724:	37 fc       	sbrc	r3, 7
 726:	85 91       	lpm	r24, Z+
 728:	37 fe       	sbrs	r3, 7
 72a:	81 91       	ld	r24, Z+
 72c:	5f 01       	movw	r10, r30
 72e:	b6 01       	movw	r22, r12
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 736:	21 10       	cpse	r2, r1
 738:	2a 94       	dec	r2
 73a:	21 e0       	ldi	r18, 0x01	; 1
 73c:	82 1a       	sub	r8, r18
 73e:	91 08       	sbc	r9, r1
 740:	81 14       	cp	r8, r1
 742:	91 04       	cpc	r9, r1
 744:	71 f7       	brne	.-36     	; 0x722 <vfprintf+0x1a4>
 746:	e8 c0       	rjmp	.+464    	; 0x918 <__stack+0xb9>
 748:	84 36       	cpi	r24, 0x64	; 100
 74a:	11 f0       	breq	.+4      	; 0x750 <vfprintf+0x1d2>
 74c:	89 36       	cpi	r24, 0x69	; 105
 74e:	41 f5       	brne	.+80     	; 0x7a0 <vfprintf+0x222>
 750:	f8 01       	movw	r30, r16
 752:	37 fe       	sbrs	r3, 7
 754:	07 c0       	rjmp	.+14     	; 0x764 <vfprintf+0x1e6>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	0c 5f       	subi	r16, 0xFC	; 252
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	08 c0       	rjmp	.+16     	; 0x774 <vfprintf+0x1f6>
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	07 2e       	mov	r0, r23
 76a:	00 0c       	add	r0, r0
 76c:	88 0b       	sbc	r24, r24
 76e:	99 0b       	sbc	r25, r25
 770:	0e 5f       	subi	r16, 0xFE	; 254
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	f3 2d       	mov	r31, r3
 776:	ff 76       	andi	r31, 0x6F	; 111
 778:	3f 2e       	mov	r3, r31
 77a:	97 ff       	sbrs	r25, 7
 77c:	09 c0       	rjmp	.+18     	; 0x790 <vfprintf+0x212>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	f0 68       	ori	r31, 0x80	; 128
 78e:	3f 2e       	mov	r3, r31
 790:	2a e0       	ldi	r18, 0x0A	; 10
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	a3 01       	movw	r20, r6
 796:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__ultoa_invert>
 79a:	88 2e       	mov	r8, r24
 79c:	86 18       	sub	r8, r6
 79e:	45 c0       	rjmp	.+138    	; 0x82a <vfprintf+0x2ac>
 7a0:	85 37       	cpi	r24, 0x75	; 117
 7a2:	31 f4       	brne	.+12     	; 0x7b0 <vfprintf+0x232>
 7a4:	23 2d       	mov	r18, r3
 7a6:	2f 7e       	andi	r18, 0xEF	; 239
 7a8:	b2 2e       	mov	r11, r18
 7aa:	2a e0       	ldi	r18, 0x0A	; 10
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	25 c0       	rjmp	.+74     	; 0x7fa <vfprintf+0x27c>
 7b0:	93 2d       	mov	r25, r3
 7b2:	99 7f       	andi	r25, 0xF9	; 249
 7b4:	b9 2e       	mov	r11, r25
 7b6:	8f 36       	cpi	r24, 0x6F	; 111
 7b8:	c1 f0       	breq	.+48     	; 0x7ea <vfprintf+0x26c>
 7ba:	18 f4       	brcc	.+6      	; 0x7c2 <vfprintf+0x244>
 7bc:	88 35       	cpi	r24, 0x58	; 88
 7be:	79 f0       	breq	.+30     	; 0x7de <vfprintf+0x260>
 7c0:	b5 c0       	rjmp	.+362    	; 0x92c <__stack+0xcd>
 7c2:	80 37       	cpi	r24, 0x70	; 112
 7c4:	19 f0       	breq	.+6      	; 0x7cc <vfprintf+0x24e>
 7c6:	88 37       	cpi	r24, 0x78	; 120
 7c8:	21 f0       	breq	.+8      	; 0x7d2 <vfprintf+0x254>
 7ca:	b0 c0       	rjmp	.+352    	; 0x92c <__stack+0xcd>
 7cc:	e9 2f       	mov	r30, r25
 7ce:	e0 61       	ori	r30, 0x10	; 16
 7d0:	be 2e       	mov	r11, r30
 7d2:	b4 fe       	sbrs	r11, 4
 7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <vfprintf+0x272>
 7d6:	fb 2d       	mov	r31, r11
 7d8:	f4 60       	ori	r31, 0x04	; 4
 7da:	bf 2e       	mov	r11, r31
 7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <vfprintf+0x272>
 7de:	34 fe       	sbrs	r3, 4
 7e0:	0a c0       	rjmp	.+20     	; 0x7f6 <vfprintf+0x278>
 7e2:	29 2f       	mov	r18, r25
 7e4:	26 60       	ori	r18, 0x06	; 6
 7e6:	b2 2e       	mov	r11, r18
 7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <vfprintf+0x278>
 7ea:	28 e0       	ldi	r18, 0x08	; 8
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <vfprintf+0x27c>
 7f0:	20 e1       	ldi	r18, 0x10	; 16
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0x27c>
 7f6:	20 e1       	ldi	r18, 0x10	; 16
 7f8:	32 e0       	ldi	r19, 0x02	; 2
 7fa:	f8 01       	movw	r30, r16
 7fc:	b7 fe       	sbrs	r11, 7
 7fe:	07 c0       	rjmp	.+14     	; 0x80e <vfprintf+0x290>
 800:	60 81       	ld	r22, Z
 802:	71 81       	ldd	r23, Z+1	; 0x01
 804:	82 81       	ldd	r24, Z+2	; 0x02
 806:	93 81       	ldd	r25, Z+3	; 0x03
 808:	0c 5f       	subi	r16, 0xFC	; 252
 80a:	1f 4f       	sbci	r17, 0xFF	; 255
 80c:	06 c0       	rjmp	.+12     	; 0x81a <vfprintf+0x29c>
 80e:	60 81       	ld	r22, Z
 810:	71 81       	ldd	r23, Z+1	; 0x01
 812:	80 e0       	ldi	r24, 0x00	; 0
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	0e 5f       	subi	r16, 0xFE	; 254
 818:	1f 4f       	sbci	r17, 0xFF	; 255
 81a:	a3 01       	movw	r20, r6
 81c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__ultoa_invert>
 820:	88 2e       	mov	r8, r24
 822:	86 18       	sub	r8, r6
 824:	fb 2d       	mov	r31, r11
 826:	ff 77       	andi	r31, 0x7F	; 127
 828:	3f 2e       	mov	r3, r31
 82a:	36 fe       	sbrs	r3, 6
 82c:	0d c0       	rjmp	.+26     	; 0x848 <vfprintf+0x2ca>
 82e:	23 2d       	mov	r18, r3
 830:	2e 7f       	andi	r18, 0xFE	; 254
 832:	a2 2e       	mov	r10, r18
 834:	89 14       	cp	r8, r9
 836:	58 f4       	brcc	.+22     	; 0x84e <vfprintf+0x2d0>
 838:	34 fe       	sbrs	r3, 4
 83a:	0b c0       	rjmp	.+22     	; 0x852 <vfprintf+0x2d4>
 83c:	32 fc       	sbrc	r3, 2
 83e:	09 c0       	rjmp	.+18     	; 0x852 <vfprintf+0x2d4>
 840:	83 2d       	mov	r24, r3
 842:	8e 7e       	andi	r24, 0xEE	; 238
 844:	a8 2e       	mov	r10, r24
 846:	05 c0       	rjmp	.+10     	; 0x852 <vfprintf+0x2d4>
 848:	b8 2c       	mov	r11, r8
 84a:	a3 2c       	mov	r10, r3
 84c:	03 c0       	rjmp	.+6      	; 0x854 <vfprintf+0x2d6>
 84e:	b8 2c       	mov	r11, r8
 850:	01 c0       	rjmp	.+2      	; 0x854 <vfprintf+0x2d6>
 852:	b9 2c       	mov	r11, r9
 854:	a4 fe       	sbrs	r10, 4
 856:	0f c0       	rjmp	.+30     	; 0x876 <__stack+0x17>
 858:	fe 01       	movw	r30, r28
 85a:	e8 0d       	add	r30, r8
 85c:	f1 1d       	adc	r31, r1
 85e:	80 81       	ld	r24, Z
 860:	80 33       	cpi	r24, 0x30	; 48
 862:	21 f4       	brne	.+8      	; 0x86c <__stack+0xd>
 864:	9a 2d       	mov	r25, r10
 866:	99 7e       	andi	r25, 0xE9	; 233
 868:	a9 2e       	mov	r10, r25
 86a:	09 c0       	rjmp	.+18     	; 0x87e <__stack+0x1f>
 86c:	a2 fe       	sbrs	r10, 2
 86e:	06 c0       	rjmp	.+12     	; 0x87c <__stack+0x1d>
 870:	b3 94       	inc	r11
 872:	b3 94       	inc	r11
 874:	04 c0       	rjmp	.+8      	; 0x87e <__stack+0x1f>
 876:	8a 2d       	mov	r24, r10
 878:	86 78       	andi	r24, 0x86	; 134
 87a:	09 f0       	breq	.+2      	; 0x87e <__stack+0x1f>
 87c:	b3 94       	inc	r11
 87e:	a3 fc       	sbrc	r10, 3
 880:	11 c0       	rjmp	.+34     	; 0x8a4 <__stack+0x45>
 882:	a0 fe       	sbrs	r10, 0
 884:	06 c0       	rjmp	.+12     	; 0x892 <__stack+0x33>
 886:	b2 14       	cp	r11, r2
 888:	88 f4       	brcc	.+34     	; 0x8ac <__stack+0x4d>
 88a:	28 0c       	add	r2, r8
 88c:	92 2c       	mov	r9, r2
 88e:	9b 18       	sub	r9, r11
 890:	0e c0       	rjmp	.+28     	; 0x8ae <__stack+0x4f>
 892:	b2 14       	cp	r11, r2
 894:	60 f4       	brcc	.+24     	; 0x8ae <__stack+0x4f>
 896:	b6 01       	movw	r22, r12
 898:	80 e2       	ldi	r24, 0x20	; 32
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8a0:	b3 94       	inc	r11
 8a2:	f7 cf       	rjmp	.-18     	; 0x892 <__stack+0x33>
 8a4:	b2 14       	cp	r11, r2
 8a6:	18 f4       	brcc	.+6      	; 0x8ae <__stack+0x4f>
 8a8:	2b 18       	sub	r2, r11
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
 8ac:	98 2c       	mov	r9, r8
 8ae:	21 2c       	mov	r2, r1
 8b0:	a4 fe       	sbrs	r10, 4
 8b2:	10 c0       	rjmp	.+32     	; 0x8d4 <__stack+0x75>
 8b4:	b6 01       	movw	r22, r12
 8b6:	80 e3       	ldi	r24, 0x30	; 48
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8be:	a2 fe       	sbrs	r10, 2
 8c0:	17 c0       	rjmp	.+46     	; 0x8f0 <__stack+0x91>
 8c2:	a1 fc       	sbrc	r10, 1
 8c4:	03 c0       	rjmp	.+6      	; 0x8cc <__stack+0x6d>
 8c6:	88 e7       	ldi	r24, 0x78	; 120
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <__stack+0x71>
 8cc:	88 e5       	ldi	r24, 0x58	; 88
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	b6 01       	movw	r22, r12
 8d2:	0c c0       	rjmp	.+24     	; 0x8ec <__stack+0x8d>
 8d4:	8a 2d       	mov	r24, r10
 8d6:	86 78       	andi	r24, 0x86	; 134
 8d8:	59 f0       	breq	.+22     	; 0x8f0 <__stack+0x91>
 8da:	a1 fe       	sbrs	r10, 1
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
 8de:	8b e2       	ldi	r24, 0x2B	; 43
 8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <__stack+0x85>
 8e2:	80 e2       	ldi	r24, 0x20	; 32
 8e4:	a7 fc       	sbrc	r10, 7
 8e6:	8d e2       	ldi	r24, 0x2D	; 45
 8e8:	b6 01       	movw	r22, r12
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8f0:	89 14       	cp	r8, r9
 8f2:	38 f4       	brcc	.+14     	; 0x902 <__stack+0xa3>
 8f4:	b6 01       	movw	r22, r12
 8f6:	80 e3       	ldi	r24, 0x30	; 48
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 8fe:	9a 94       	dec	r9
 900:	f7 cf       	rjmp	.-18     	; 0x8f0 <__stack+0x91>
 902:	8a 94       	dec	r8
 904:	f3 01       	movw	r30, r6
 906:	e8 0d       	add	r30, r8
 908:	f1 1d       	adc	r31, r1
 90a:	80 81       	ld	r24, Z
 90c:	b6 01       	movw	r22, r12
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 914:	81 10       	cpse	r8, r1
 916:	f5 cf       	rjmp	.-22     	; 0x902 <__stack+0xa3>
 918:	22 20       	and	r2, r2
 91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0xbf>
 91c:	42 ce       	rjmp	.-892    	; 0x5a2 <vfprintf+0x24>
 91e:	b6 01       	movw	r22, r12
 920:	80 e2       	ldi	r24, 0x20	; 32
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	0e 94 b6 04 	call	0x96c	; 0x96c <fputc>
 928:	2a 94       	dec	r2
 92a:	f6 cf       	rjmp	.-20     	; 0x918 <__stack+0xb9>
 92c:	f6 01       	movw	r30, r12
 92e:	86 81       	ldd	r24, Z+6	; 0x06
 930:	97 81       	ldd	r25, Z+7	; 0x07
 932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0xd9>
 934:	8f ef       	ldi	r24, 0xFF	; 255
 936:	9f ef       	ldi	r25, 0xFF	; 255
 938:	2b 96       	adiw	r28, 0x0b	; 11
 93a:	e2 e1       	ldi	r30, 0x12	; 18
 93c:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__epilogue_restores__>

00000940 <strnlen_P>:
 940:	fc 01       	movw	r30, r24
 942:	05 90       	lpm	r0, Z+
 944:	61 50       	subi	r22, 0x01	; 1
 946:	70 40       	sbci	r23, 0x00	; 0
 948:	01 10       	cpse	r0, r1
 94a:	d8 f7       	brcc	.-10     	; 0x942 <strnlen_P+0x2>
 94c:	80 95       	com	r24
 94e:	90 95       	com	r25
 950:	8e 0f       	add	r24, r30
 952:	9f 1f       	adc	r25, r31
 954:	08 95       	ret

00000956 <strnlen>:
 956:	fc 01       	movw	r30, r24
 958:	61 50       	subi	r22, 0x01	; 1
 95a:	70 40       	sbci	r23, 0x00	; 0
 95c:	01 90       	ld	r0, Z+
 95e:	01 10       	cpse	r0, r1
 960:	d8 f7       	brcc	.-10     	; 0x958 <strnlen+0x2>
 962:	80 95       	com	r24
 964:	90 95       	com	r25
 966:	8e 0f       	add	r24, r30
 968:	9f 1f       	adc	r25, r31
 96a:	08 95       	ret

0000096c <fputc>:
 96c:	0f 93       	push	r16
 96e:	1f 93       	push	r17
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	fb 01       	movw	r30, r22
 976:	23 81       	ldd	r18, Z+3	; 0x03
 978:	21 fd       	sbrc	r18, 1
 97a:	03 c0       	rjmp	.+6      	; 0x982 <fputc+0x16>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	2c c0       	rjmp	.+88     	; 0x9da <fputc+0x6e>
 982:	22 ff       	sbrs	r18, 2
 984:	16 c0       	rjmp	.+44     	; 0x9b2 <fputc+0x46>
 986:	46 81       	ldd	r20, Z+6	; 0x06
 988:	57 81       	ldd	r21, Z+7	; 0x07
 98a:	24 81       	ldd	r18, Z+4	; 0x04
 98c:	35 81       	ldd	r19, Z+5	; 0x05
 98e:	42 17       	cp	r20, r18
 990:	53 07       	cpc	r21, r19
 992:	44 f4       	brge	.+16     	; 0x9a4 <fputc+0x38>
 994:	a0 81       	ld	r26, Z
 996:	b1 81       	ldd	r27, Z+1	; 0x01
 998:	9d 01       	movw	r18, r26
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	31 83       	std	Z+1, r19	; 0x01
 9a0:	20 83       	st	Z, r18
 9a2:	8c 93       	st	X, r24
 9a4:	26 81       	ldd	r18, Z+6	; 0x06
 9a6:	37 81       	ldd	r19, Z+7	; 0x07
 9a8:	2f 5f       	subi	r18, 0xFF	; 255
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	37 83       	std	Z+7, r19	; 0x07
 9ae:	26 83       	std	Z+6, r18	; 0x06
 9b0:	14 c0       	rjmp	.+40     	; 0x9da <fputc+0x6e>
 9b2:	8b 01       	movw	r16, r22
 9b4:	ec 01       	movw	r28, r24
 9b6:	fb 01       	movw	r30, r22
 9b8:	00 84       	ldd	r0, Z+8	; 0x08
 9ba:	f1 85       	ldd	r31, Z+9	; 0x09
 9bc:	e0 2d       	mov	r30, r0
 9be:	09 95       	icall
 9c0:	89 2b       	or	r24, r25
 9c2:	e1 f6       	brne	.-72     	; 0x97c <fputc+0x10>
 9c4:	d8 01       	movw	r26, r16
 9c6:	16 96       	adiw	r26, 0x06	; 6
 9c8:	8d 91       	ld	r24, X+
 9ca:	9c 91       	ld	r25, X
 9cc:	17 97       	sbiw	r26, 0x07	; 7
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	17 96       	adiw	r26, 0x07	; 7
 9d2:	9c 93       	st	X, r25
 9d4:	8e 93       	st	-X, r24
 9d6:	16 97       	sbiw	r26, 0x06	; 6
 9d8:	ce 01       	movw	r24, r28
 9da:	df 91       	pop	r29
 9dc:	cf 91       	pop	r28
 9de:	1f 91       	pop	r17
 9e0:	0f 91       	pop	r16
 9e2:	08 95       	ret

000009e4 <__ultoa_invert>:
 9e4:	fa 01       	movw	r30, r20
 9e6:	aa 27       	eor	r26, r26
 9e8:	28 30       	cpi	r18, 0x08	; 8
 9ea:	51 f1       	breq	.+84     	; 0xa40 <__ultoa_invert+0x5c>
 9ec:	20 31       	cpi	r18, 0x10	; 16
 9ee:	81 f1       	breq	.+96     	; 0xa50 <__ultoa_invert+0x6c>
 9f0:	e8 94       	clt
 9f2:	6f 93       	push	r22
 9f4:	6e 7f       	andi	r22, 0xFE	; 254
 9f6:	6e 5f       	subi	r22, 0xFE	; 254
 9f8:	7f 4f       	sbci	r23, 0xFF	; 255
 9fa:	8f 4f       	sbci	r24, 0xFF	; 255
 9fc:	9f 4f       	sbci	r25, 0xFF	; 255
 9fe:	af 4f       	sbci	r26, 0xFF	; 255
 a00:	b1 e0       	ldi	r27, 0x01	; 1
 a02:	3e d0       	rcall	.+124    	; 0xa80 <__ultoa_invert+0x9c>
 a04:	b4 e0       	ldi	r27, 0x04	; 4
 a06:	3c d0       	rcall	.+120    	; 0xa80 <__ultoa_invert+0x9c>
 a08:	67 0f       	add	r22, r23
 a0a:	78 1f       	adc	r23, r24
 a0c:	89 1f       	adc	r24, r25
 a0e:	9a 1f       	adc	r25, r26
 a10:	a1 1d       	adc	r26, r1
 a12:	68 0f       	add	r22, r24
 a14:	79 1f       	adc	r23, r25
 a16:	8a 1f       	adc	r24, r26
 a18:	91 1d       	adc	r25, r1
 a1a:	a1 1d       	adc	r26, r1
 a1c:	6a 0f       	add	r22, r26
 a1e:	71 1d       	adc	r23, r1
 a20:	81 1d       	adc	r24, r1
 a22:	91 1d       	adc	r25, r1
 a24:	a1 1d       	adc	r26, r1
 a26:	20 d0       	rcall	.+64     	; 0xa68 <__ultoa_invert+0x84>
 a28:	09 f4       	brne	.+2      	; 0xa2c <__ultoa_invert+0x48>
 a2a:	68 94       	set
 a2c:	3f 91       	pop	r19
 a2e:	2a e0       	ldi	r18, 0x0A	; 10
 a30:	26 9f       	mul	r18, r22
 a32:	11 24       	eor	r1, r1
 a34:	30 19       	sub	r19, r0
 a36:	30 5d       	subi	r19, 0xD0	; 208
 a38:	31 93       	st	Z+, r19
 a3a:	de f6       	brtc	.-74     	; 0x9f2 <__ultoa_invert+0xe>
 a3c:	cf 01       	movw	r24, r30
 a3e:	08 95       	ret
 a40:	46 2f       	mov	r20, r22
 a42:	47 70       	andi	r20, 0x07	; 7
 a44:	40 5d       	subi	r20, 0xD0	; 208
 a46:	41 93       	st	Z+, r20
 a48:	b3 e0       	ldi	r27, 0x03	; 3
 a4a:	0f d0       	rcall	.+30     	; 0xa6a <__ultoa_invert+0x86>
 a4c:	c9 f7       	brne	.-14     	; 0xa40 <__ultoa_invert+0x5c>
 a4e:	f6 cf       	rjmp	.-20     	; 0xa3c <__ultoa_invert+0x58>
 a50:	46 2f       	mov	r20, r22
 a52:	4f 70       	andi	r20, 0x0F	; 15
 a54:	40 5d       	subi	r20, 0xD0	; 208
 a56:	4a 33       	cpi	r20, 0x3A	; 58
 a58:	18 f0       	brcs	.+6      	; 0xa60 <__ultoa_invert+0x7c>
 a5a:	49 5d       	subi	r20, 0xD9	; 217
 a5c:	31 fd       	sbrc	r19, 1
 a5e:	40 52       	subi	r20, 0x20	; 32
 a60:	41 93       	st	Z+, r20
 a62:	02 d0       	rcall	.+4      	; 0xa68 <__ultoa_invert+0x84>
 a64:	a9 f7       	brne	.-22     	; 0xa50 <__ultoa_invert+0x6c>
 a66:	ea cf       	rjmp	.-44     	; 0xa3c <__ultoa_invert+0x58>
 a68:	b4 e0       	ldi	r27, 0x04	; 4
 a6a:	a6 95       	lsr	r26
 a6c:	97 95       	ror	r25
 a6e:	87 95       	ror	r24
 a70:	77 95       	ror	r23
 a72:	67 95       	ror	r22
 a74:	ba 95       	dec	r27
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__ultoa_invert+0x86>
 a78:	00 97       	sbiw	r24, 0x00	; 0
 a7a:	61 05       	cpc	r22, r1
 a7c:	71 05       	cpc	r23, r1
 a7e:	08 95       	ret
 a80:	9b 01       	movw	r18, r22
 a82:	ac 01       	movw	r20, r24
 a84:	0a 2e       	mov	r0, r26
 a86:	06 94       	lsr	r0
 a88:	57 95       	ror	r21
 a8a:	47 95       	ror	r20
 a8c:	37 95       	ror	r19
 a8e:	27 95       	ror	r18
 a90:	ba 95       	dec	r27
 a92:	c9 f7       	brne	.-14     	; 0xa86 <__ultoa_invert+0xa2>
 a94:	62 0f       	add	r22, r18
 a96:	73 1f       	adc	r23, r19
 a98:	84 1f       	adc	r24, r20
 a9a:	95 1f       	adc	r25, r21
 a9c:	a0 1d       	adc	r26, r0
 a9e:	08 95       	ret

00000aa0 <__prologue_saves__>:
 aa0:	2f 92       	push	r2
 aa2:	3f 92       	push	r3
 aa4:	4f 92       	push	r4
 aa6:	5f 92       	push	r5
 aa8:	6f 92       	push	r6
 aaa:	7f 92       	push	r7
 aac:	8f 92       	push	r8
 aae:	9f 92       	push	r9
 ab0:	af 92       	push	r10
 ab2:	bf 92       	push	r11
 ab4:	cf 92       	push	r12
 ab6:	df 92       	push	r13
 ab8:	ef 92       	push	r14
 aba:	ff 92       	push	r15
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	cd b7       	in	r28, 0x3d	; 61
 ac6:	de b7       	in	r29, 0x3e	; 62
 ac8:	ca 1b       	sub	r28, r26
 aca:	db 0b       	sbc	r29, r27
 acc:	0f b6       	in	r0, 0x3f	; 63
 ace:	f8 94       	cli
 ad0:	de bf       	out	0x3e, r29	; 62
 ad2:	0f be       	out	0x3f, r0	; 63
 ad4:	cd bf       	out	0x3d, r28	; 61
 ad6:	09 94       	ijmp

00000ad8 <__epilogue_restores__>:
 ad8:	2a 88       	ldd	r2, Y+18	; 0x12
 ada:	39 88       	ldd	r3, Y+17	; 0x11
 adc:	48 88       	ldd	r4, Y+16	; 0x10
 ade:	5f 84       	ldd	r5, Y+15	; 0x0f
 ae0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ae2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ae4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ae6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ae8:	aa 84       	ldd	r10, Y+10	; 0x0a
 aea:	b9 84       	ldd	r11, Y+9	; 0x09
 aec:	c8 84       	ldd	r12, Y+8	; 0x08
 aee:	df 80       	ldd	r13, Y+7	; 0x07
 af0:	ee 80       	ldd	r14, Y+6	; 0x06
 af2:	fd 80       	ldd	r15, Y+5	; 0x05
 af4:	0c 81       	ldd	r16, Y+4	; 0x04
 af6:	1b 81       	ldd	r17, Y+3	; 0x03
 af8:	aa 81       	ldd	r26, Y+2	; 0x02
 afa:	b9 81       	ldd	r27, Y+1	; 0x01
 afc:	ce 0f       	add	r28, r30
 afe:	d1 1d       	adc	r29, r1
 b00:	0f b6       	in	r0, 0x3f	; 63
 b02:	f8 94       	cli
 b04:	de bf       	out	0x3e, r29	; 62
 b06:	0f be       	out	0x3f, r0	; 63
 b08:	cd bf       	out	0x3d, r28	; 61
 b0a:	ed 01       	movw	r28, r26
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
