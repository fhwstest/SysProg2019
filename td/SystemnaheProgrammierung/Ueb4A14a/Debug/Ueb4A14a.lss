
Ueb4A14a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000798  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000645  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  00001141  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035f  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000158  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  74:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <starttimer>:
void starttimer()
{
	// Prescaler 256
	//TCCR0 |= (1 << CS00);
	//TCCR0 |= (1 << CS01);
	TCCR0 |= (1 << CS02);
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	83 bf       	out	0x33, r24	; 51
  82:	08 95       	ret

00000084 <stoptimer>:
	return;
}

void stoptimer()
{
	TCCR0 &= ~(1 << CS00);
  84:	83 b7       	in	r24, 0x33	; 51
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << CS01);
  8a:	83 b7       	in	r24, 0x33	; 51
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	83 bf       	out	0x33, r24	; 51
	TCCR0 &= ~(1 << CS02);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	83 bf       	out	0x33, r24	; 51
  96:	08 95       	ret

00000098 <playTone>:
		}
	}
}

void playTone(unsigned int hz, unsigned int dauer_ms)
{
  98:	cf 92       	push	r12
  9a:	df 92       	push	r13
  9c:	ef 92       	push	r14
  9e:	ff 92       	push	r15
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	c8 2f       	mov	r28, r24
  a6:	d9 2f       	mov	r29, r25
  a8:	6b 01       	movw	r12, r22
	uint32_t stop_ocr0_matches = 0;
	
	stoptimer();
  aa:	0e 94 42 00 	call	0x84	; 0x84 <stoptimer>

	//Hertz umrechnen und ist OutCompareRegiter vom Timer 0 schreiben
	OCR0 = hz2ocr(hz);
  ae:	fc 2e       	mov	r15, r28
  b0:	e1 2c       	mov	r14, r1
  b2:	97 01       	movw	r18, r14
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	72 e1       	ldi	r23, 0x12	; 18
  bc:	8a e7       	ldi	r24, 0x7A	; 122
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodsi4>
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	31 09       	sbc	r19, r1
  c8:	2c bf       	out	0x3c, r18	; 60
	
	isr_ocr0_matches = 0;
  ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	
	// hz == (ISR Aufrufe pro Sekunde * spieldauer in ms) / 1000 ms
	stop_ocr0_matches = ((uint32_t) hz * (uint32_t) dauer_ms) / 1000;
  d2:	2c 2f       	mov	r18, r28
  d4:	3d 2f       	mov	r19, r29
  d6:	d6 01       	movw	r26, r12
  d8:	0e 94 04 01 	call	0x208	; 0x208 <__umulhisi3>
  dc:	28 ee       	ldi	r18, 0xE8	; 232
  de:	33 e0       	ldi	r19, 0x03	; 3
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 c3 00 	call	0x186	; 0x186 <__udivmodsi4>
  e8:	69 01       	movw	r12, r18
  ea:	7a 01       	movw	r14, r20

	starttimer();
  ec:	0e 94 3e 00 	call	0x7c	; 0x7c <starttimer>

	while (isr_ocr0_matches <= stop_ocr0_matches)
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	c8 16       	cp	r12, r24
  fe:	d9 06       	cpc	r13, r25
 100:	ea 06       	cpc	r14, r26
 102:	fb 06       	cpc	r15, r27
 104:	a8 f7       	brcc	.-22     	; 0xf0 <playTone+0x58>

	}

	// ton aus
	//OCR0 = 0;
	stoptimer();
 106:	0e 94 42 00 	call	0x84	; 0x84 <stoptimer>
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	df 90       	pop	r13
 114:	cf 90       	pop	r12
 116:	08 95       	ret

00000118 <settimer>:
}

void settimer()
{
	// Output Compare Match Interrupt erlauben
	TIMSK |= (1 << OCIE0);
 118:	89 b7       	in	r24, 0x39	; 57
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	89 bf       	out	0x39, r24	; 57

	// Timer 0 konfigurieren
	//TCCR0 = 0x00 ;        // Reset auf 0
	
	//ComparMatchOutput. Toggle OC0 (I/0 Port) an. (ist der PB3)
	TCCR0 |= (1 << COM00);
 11e:	83 b7       	in	r24, 0x33	; 51
 120:	80 61       	ori	r24, 0x10	; 16
 122:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= (1 << COM01);

	//CTC Betriebsmodus
	//TCCR0 = (0 << WGM00);
	TCCR0 |= (1 << WGM01);
 124:	83 b7       	in	r24, 0x33	; 51
 126:	88 60       	ori	r24, 0x08	; 8
 128:	83 bf       	out	0x33, r24	; 51
	
	//wird erst mal nicht gebraucht
	stoptimer();
 12a:	0e 94 42 00 	call	0x84	; 0x84 <stoptimer>

	OCR0 = 0;
 12e:	1c be       	out	0x3c, r1	; 60

	// Global Interrupts aktivieren
	sei();
 130:	78 94       	sei
 132:	08 95       	ret

00000134 <init>:
}


void init()
{
	settimer();
 134:	0e 94 8c 00 	call	0x118	; 0x118 <settimer>

	//Set I/0 Port config
	DDRA = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFE;
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	8b bb       	out	0x1b, r24	; 27
		
	//OC0 Pin als Output
	DDRB = (1<<PB3);
 140:	88 e0       	ldi	r24, 0x08	; 8
 142:	87 bb       	out	0x17, r24	; 23
 144:	08 95       	ret

00000146 <main>:
	unsigned int noten[1] = {5000};  //{cHz, dHz, eHz, fHz, gHz, aHz, hHz};
	unsigned int dauer[1] = {500}; //{400,400,400,400,400,400,400};
	unsigned int curTone = 1;
	unsigned int arrsize = sizeof(noten) / sizeof(unsigned int);

	init();
 146:	0e 94 9a 00 	call	0x134	; 0x134 <init>
		
	while (1)
	{
		playTone(noten[curTone-1], dauer[curTone-1]);
 14a:	64 ef       	ldi	r22, 0xF4	; 244
 14c:	71 e0       	ldi	r23, 0x01	; 1
 14e:	88 e8       	ldi	r24, 0x88	; 136
 150:	93 e1       	ldi	r25, 0x13	; 19
 152:	0e 94 4c 00 	call	0x98	; 0x98 <playTone>
 156:	f9 cf       	rjmp	.-14     	; 0x14a <main+0x4>

00000158 <__vector_10>:
	sei();
}


//OCIE0 Interruptroutine
ISR(TIMER0_COMP_vect) {
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	++isr_ocr0_matches;
 166:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 16a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 174:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__udivmodsi4>:
 186:	a1 e2       	ldi	r26, 0x21	; 33
 188:	1a 2e       	mov	r1, r26
 18a:	aa 1b       	sub	r26, r26
 18c:	bb 1b       	sub	r27, r27
 18e:	fd 01       	movw	r30, r26
 190:	0d c0       	rjmp	.+26     	; 0x1ac <__udivmodsi4_ep>

00000192 <__udivmodsi4_loop>:
 192:	aa 1f       	adc	r26, r26
 194:	bb 1f       	adc	r27, r27
 196:	ee 1f       	adc	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	a2 17       	cp	r26, r18
 19c:	b3 07       	cpc	r27, r19
 19e:	e4 07       	cpc	r30, r20
 1a0:	f5 07       	cpc	r31, r21
 1a2:	20 f0       	brcs	.+8      	; 0x1ac <__udivmodsi4_ep>
 1a4:	a2 1b       	sub	r26, r18
 1a6:	b3 0b       	sbc	r27, r19
 1a8:	e4 0b       	sbc	r30, r20
 1aa:	f5 0b       	sbc	r31, r21

000001ac <__udivmodsi4_ep>:
 1ac:	66 1f       	adc	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	88 1f       	adc	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	1a 94       	dec	r1
 1b6:	69 f7       	brne	.-38     	; 0x192 <__udivmodsi4_loop>
 1b8:	60 95       	com	r22
 1ba:	70 95       	com	r23
 1bc:	80 95       	com	r24
 1be:	90 95       	com	r25
 1c0:	9b 01       	movw	r18, r22
 1c2:	ac 01       	movw	r20, r24
 1c4:	bd 01       	movw	r22, r26
 1c6:	cf 01       	movw	r24, r30
 1c8:	08 95       	ret

000001ca <__divmodsi4>:
 1ca:	05 2e       	mov	r0, r21
 1cc:	97 fb       	bst	r25, 7
 1ce:	1e f4       	brtc	.+6      	; 0x1d6 <__divmodsi4+0xc>
 1d0:	00 94       	com	r0
 1d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__negsi2>
 1d6:	57 fd       	sbrc	r21, 7
 1d8:	07 d0       	rcall	.+14     	; 0x1e8 <__divmodsi4_neg2>
 1da:	0e 94 c3 00 	call	0x186	; 0x186 <__udivmodsi4>
 1de:	07 fc       	sbrc	r0, 7
 1e0:	03 d0       	rcall	.+6      	; 0x1e8 <__divmodsi4_neg2>
 1e2:	4e f4       	brtc	.+18     	; 0x1f6 <__divmodsi4_exit>
 1e4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__negsi2>

000001e8 <__divmodsi4_neg2>:
 1e8:	50 95       	com	r21
 1ea:	40 95       	com	r20
 1ec:	30 95       	com	r19
 1ee:	21 95       	neg	r18
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	4f 4f       	sbci	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255

000001f6 <__divmodsi4_exit>:
 1f6:	08 95       	ret

000001f8 <__negsi2>:
 1f8:	90 95       	com	r25
 1fa:	80 95       	com	r24
 1fc:	70 95       	com	r23
 1fe:	61 95       	neg	r22
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	8f 4f       	sbci	r24, 0xFF	; 255
 204:	9f 4f       	sbci	r25, 0xFF	; 255
 206:	08 95       	ret

00000208 <__umulhisi3>:
 208:	a2 9f       	mul	r26, r18
 20a:	b0 01       	movw	r22, r0
 20c:	b3 9f       	mul	r27, r19
 20e:	c0 01       	movw	r24, r0
 210:	a3 9f       	mul	r26, r19
 212:	70 0d       	add	r23, r0
 214:	81 1d       	adc	r24, r1
 216:	11 24       	eor	r1, r1
 218:	91 1d       	adc	r25, r1
 21a:	b2 9f       	mul	r27, r18
 21c:	70 0d       	add	r23, r0
 21e:	81 1d       	adc	r24, r1
 220:	11 24       	eor	r1, r1
 222:	91 1d       	adc	r25, r1
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
