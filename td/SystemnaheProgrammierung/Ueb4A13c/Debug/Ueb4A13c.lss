
Ueb4A13c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005c1  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053a  00000000  00000000  00000849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022d  00000000  00000000  00000d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f1  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006d  00000000  00000000  000012e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
{

	int seconds = 0;

	// Output Compare Match Interrupt erlauben
	TIMSK |= (1 << OCIE0);
  92:	89 b7       	in	r24, 0x39	; 57
  94:	82 60       	ori	r24, 0x02	; 2
  96:	89 bf       	out	0x39, r24	; 57
	TIMSK |= (1 << TOIE0);
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	89 bf       	out	0x39, r24	; 57

	// Timer 0 konfigurieren
	TCCR0 = 0x00 ;        // Reset auf 0
  9e:	13 be       	out	0x33, r1	; 51

	// Prescaler 64
	TCCR0 |= (1 << CS00);
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= (0 << COM00);
	//TCCR0 |= (0 << COM01);

	//CTC Betriebsmodus
	//TCCR0 = (0 << WGM00);
	TCCR0 |= (1 << WGM01);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	83 bf       	out	0x33, r24	; 51

	
	// 8.000.000 Hz / (64 * 1000 Hz) = 125
	OCR0 = 125-1; // Frequenz OCR 1000Hz
  b2:	8c e7       	ldi	r24, 0x7C	; 124
  b4:	8c bf       	out	0x3c, r24	; 60

	// Global Interrupts aktivieren
	sei();
  b6:	78 94       	sei

	DDRA = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x01;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	8b bb       	out	0x1b, r24	; 27


int main(void)
{

	int seconds = 0;
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
		
	while(1) {
		if (milliseccnt >= 1000) {
			
			seconds++;
			PORTA = ~(((seconds / 10) << 4) | (seconds % 10));
  c4:	ea e0       	ldi	r30, 0x0A	; 10
  c6:	f0 e0       	ldi	r31, 0x00	; 0

	DDRA = 0xFF;
	PORTA = 0x01;
		
	while(1) {
		if (milliseccnt >= 1000) {
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  d0:	88 3e       	cpi	r24, 0xE8	; 232
  d2:	93 40       	sbci	r25, 0x03	; 3
  d4:	c8 f3       	brcs	.-14     	; 0xc8 <main+0x36>
			
			seconds++;
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
			PORTA = ~(((seconds / 10) << 4) | (seconds % 10));
  da:	c9 01       	movw	r24, r18
  dc:	bf 01       	movw	r22, r30
  de:	0e 94 96 00 	call	0x12c	; 0x12c <__divmodhi4>
  e2:	62 95       	swap	r22
  e4:	72 95       	swap	r23
  e6:	70 7f       	andi	r23, 0xF0	; 240
  e8:	76 27       	eor	r23, r22
  ea:	60 7f       	andi	r22, 0xF0	; 240
  ec:	76 27       	eor	r23, r22
  ee:	86 2b       	or	r24, r22
  f0:	80 95       	com	r24
  f2:	8b bb       	out	0x1b, r24	; 27
			milliseccnt = 0;
  f4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
  f8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <main+0x36>

000000fe <__vector_10>:
	return 0;

}

//OCIE0 Interruptroutine
ISR(TIMER0_COMP_vect) {
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	
	++milliseccnt;
 10c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 110:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
 11a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>


}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <__divmodhi4>:
 12c:	97 fb       	bst	r25, 7
 12e:	07 2e       	mov	r0, r23
 130:	16 f4       	brtc	.+4      	; 0x136 <__divmodhi4+0xa>
 132:	00 94       	com	r0
 134:	07 d0       	rcall	.+14     	; 0x144 <__divmodhi4_neg1>
 136:	77 fd       	sbrc	r23, 7
 138:	09 d0       	rcall	.+18     	; 0x14c <__divmodhi4_neg2>
 13a:	0e 94 aa 00 	call	0x154	; 0x154 <__udivmodhi4>
 13e:	07 fc       	sbrc	r0, 7
 140:	05 d0       	rcall	.+10     	; 0x14c <__divmodhi4_neg2>
 142:	3e f4       	brtc	.+14     	; 0x152 <__divmodhi4_exit>

00000144 <__divmodhi4_neg1>:
 144:	90 95       	com	r25
 146:	81 95       	neg	r24
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	08 95       	ret

0000014c <__divmodhi4_neg2>:
 14c:	70 95       	com	r23
 14e:	61 95       	neg	r22
 150:	7f 4f       	sbci	r23, 0xFF	; 255

00000152 <__divmodhi4_exit>:
 152:	08 95       	ret

00000154 <__udivmodhi4>:
 154:	aa 1b       	sub	r26, r26
 156:	bb 1b       	sub	r27, r27
 158:	51 e1       	ldi	r21, 0x11	; 17
 15a:	07 c0       	rjmp	.+14     	; 0x16a <__udivmodhi4_ep>

0000015c <__udivmodhi4_loop>:
 15c:	aa 1f       	adc	r26, r26
 15e:	bb 1f       	adc	r27, r27
 160:	a6 17       	cp	r26, r22
 162:	b7 07       	cpc	r27, r23
 164:	10 f0       	brcs	.+4      	; 0x16a <__udivmodhi4_ep>
 166:	a6 1b       	sub	r26, r22
 168:	b7 0b       	sbc	r27, r23

0000016a <__udivmodhi4_ep>:
 16a:	88 1f       	adc	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	5a 95       	dec	r21
 170:	a9 f7       	brne	.-22     	; 0x15c <__udivmodhi4_loop>
 172:	80 95       	com	r24
 174:	90 95       	com	r25
 176:	bc 01       	movw	r22, r24
 178:	cd 01       	movw	r24, r26
 17a:	08 95       	ret

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
