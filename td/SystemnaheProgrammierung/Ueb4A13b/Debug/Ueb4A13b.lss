
Ueb4A13b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000188  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ea  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000545  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000231  00000000  00000000  00000d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005d  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000132f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <a13a>:
int a13a(void) {

    int seconds = 0;

	// Output Compare Match Interrupt erlauben
	TIMSK |= (1 << OCIE0);
  92:	89 b7       	in	r24, 0x39	; 57
  94:	82 60       	ori	r24, 0x02	; 2
  96:	89 bf       	out	0x39, r24	; 57
	TIMSK |= (1 << TOIE0);
  98:	89 b7       	in	r24, 0x39	; 57
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	89 bf       	out	0x39, r24	; 57

	// Timer 0 konfigurieren
	TCCR0 = 0x00 ;        // Reset auf 0
  9e:	13 be       	out	0x33, r1	; 51

	// Prescaler 64
	TCCR0 |= (1 << CS00);
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << CS01);
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	83 bf       	out	0x33, r24	; 51
	//TCCR0 |= (0 << COM00);
	//TCCR0 |= (0 << COM01);

	//CTC Betriebsmodus
	//TCCR0 = (0 << WGM00);
	TCCR0 |= (1 << WGM01);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	83 bf       	out	0x33, r24	; 51

	
	// 8.000.000 Hz / (64 * 1000 Hz) = 125
	OCR0 = 125-1; // frequenz OCR 1000Hz
  b2:	8c e7       	ldi	r24, 0x7C	; 124
  b4:	8c bf       	out	0x3c, r24	; 60

	// Global Interrupts aktivieren
	sei();
  b6:	78 94       	sei

	DDRA = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x01;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	2e ef       	ldi	r18, 0xFE	; 254
	
	
	while(1) {
		if (milliseccnt >= 1000) {
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  c6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  ca:	88 3e       	cpi	r24, 0xE8	; 232
  cc:	93 40       	sbci	r25, 0x03	; 3
  ce:	c8 f3       	brcs	.-14     	; 0xc2 <a13a+0x30>
			
			seconds++;
			PORTA = ~seconds;
  d0:	2b bb       	out	0x1b, r18	; 27
			milliseccnt = 0;
  d2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__data_end+0x1>
  d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	f2 cf       	rjmp	.-28     	; 0xc2 <a13a+0x30>

000000de <main>:

int a13a(void);

int main(void)
{
	a13a();
  de:	0e 94 49 00 	call	0x92	; 0x92 <a13a>

000000e2 <__vector_10>:
	return 0;

}

//OCIE0 Interruptroutine
ISR(TIMER0_COMP_vect) {
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	
	++milliseccnt;
  f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  f4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_end+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_end+0x1>
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>


}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
